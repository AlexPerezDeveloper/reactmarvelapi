{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","fetchSearchResults","query","searchUrl","fetch","then","res","json","data","setState","results","catch","console","log","handleOnInputChange","event","target","value","loading","message","state","heroes","cancel","className","class","type","id","placeholder","onChange","this","map","result","style","backgroundImage","thumbnail","path","extension","name","description","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sJAAAA,EAAOC,QAAU,IAA0B,kC,qICoF5BC,G,wBA3Eb,WAAaC,GAAS,IAAD,8BACnB,4CAAOA,KASTC,mBAAqB,WAAgC,wDAAC,IAAZC,EAAW,uCAEhDC,EAAS,oFAAgFD,EAAhF,kFAEZE,MAAMD,GACLE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACH,EAAKC,SAAS,CAAEC,QAASF,EAAKA,KAAKE,aAEpCC,MAAMC,QAAQC,MAnBE,EAwBrBC,oBAAsB,SAACC,GACrB,IAAMb,EAAQa,EAAMC,OAAOC,MAAcf,EAKvC,EAAKO,SAAS,CAAEP,QAAOgB,SAAS,EAAMC,QAAS,KAAM,WACnD,EAAKlB,mBAAmB,EAAGC,OAL7BU,QAAQC,IAAI,WACZ,EAAKJ,SAAS,CAAEU,QAAS,gDAA8CjB,MAAO,OA1BhE,EAAKkB,MAAQ,CAC3BlB,MAAO,GACPgB,SAAS,EACTC,QAAS,GACTE,OAAQ,GACRX,QAAS,IAEX,EAAKY,OAAS,GARK,E,sEAsCnB,OACE,yBAAKC,UAAU,OAMb,yBAAKC,MAAM,kBACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,aACT,2BAAOC,KAAK,OAAOD,MAAM,aAAaE,GAAG,eAAeC,YAAY,gCAA6BC,SAAUC,KAAKf,sBAChH,4BAAQW,KAAK,UAAb,IAAuB,uBAAGD,MAAM,iBAAhC,KACA,uBAAGA,MAAM,WAAWK,KAAKT,MAAMD,YAQrC,yBAAKK,MAAM,eACT,yBAAKA,MAAM,WACRK,KAAKT,MAAMV,QAAQoB,KAAI,SAACC,GAAD,OACtB,yBAAKP,MAAM,yDACT,yBAAKA,MAAM,UAAUQ,MAAO,CAACC,gBAAgB,OAAD,OAASF,EAAOG,UAAUC,KAA1B,YAAkCJ,EAAOG,UAAUE,UAAnD,QAC5C,yBAAKZ,MAAM,YACT,4BAAKO,EAAOM,MAClB,2BAAIN,EAAOO,yB,GApELC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,MAAK,SAAA+C,GACjCA,EAAaC,kB","file":"static/js/main.2401226e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\n\nclass App extends Component {\n\n  \n  constructor( props ) {\n    super( props );\tthis.state = {\n      query: '',\n      loading: false,\n      message: '',\n      heroes: [],\n      results: []\n    };\n    this.cancel = '';\n  }\n  fetchSearchResults = (updatedPageNo = '', query ) => {\n    \n\tconst searchUrl = `https://gateway.marvel.com/v1/public/characters?ts=thesoer&nameStartsWith=${query}&apikey=001ac6c73378bbfff488a36141458af2&hash=72e5ed53d1398abb831c3ceec263f18b`;\t\n\n    fetch(searchUrl)\n    .then(res => res.json())\n    .then((data) => {\n        this.setState({ results: data.data.results })\n      })\n      .catch(console.log)\n    \n\n};\n\n  handleOnInputChange = (event) => {\n    const query = event.target.value;\tif ( ! query  ) {\n      console.log(\"vacio!!\");\n      this.setState({ message: 'Escribe el nombre de otro Héroe de MARVEL.', query: '' })\n\n    } else {\n      this.setState({ query, loading: true, message: '' }, () => {\n        this.fetchSearchResults(1, query);\n      });\n    }\n\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n\n\n\n\n\n        <div class=\"flex-container\">\n          <div class=\"row\">\n            <div class=\"flex-item\">\n              <input type=\"text\" class=\"form-field\" id=\"search-input\" placeholder=\"Busca a tu héroe de Marvel\" onChange={this.handleOnInputChange} />\n              <button type=\"submit\"> <i class=\"fa fa-search\"></i> </button>\n              <p class=\"infoMsg\">{this.state.message}</p>\n\n            </div>\n\n          </div>\n        </div>\n\n\n        <div class=\"flex-column\">\n          <div class=\"columns\">\n            {this.state.results.map((result) => (\n              <div class=\"flex-item hero animated fadeInUp delay-2s duration-5s\">\n                <div class=\"picHero\" style={{backgroundImage: `url(${result.thumbnail.path}.${result.thumbnail.extension})`}}></div>\n                <div class=\"descHero\">\n                  <h3>{result.name}</h3>\n            <p>{result.description}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}